@model StudentResultsViewModel
@{
    ViewData["Title"] = "Results";
    var quizResults = ViewBag.QuizResults as IEnumerable<dynamic> ?? Enumerable.Empty<dynamic>();
}

@section Styles {
    <style>
        .result-card { background:#fff; border:1px solid #e2e8f1; border-radius:22px; padding:1.4rem 1.55rem 1.6rem; position:relative; box-shadow:0 4px 18px -8px rgba(0,0,0,.08); height:100%; }
        .result-card h3 { font-size:1.1rem; font-weight:700; margin:0 0 .85rem; letter-spacing:.4px; }
        .recommend-wrapper { display:flex; flex-wrap:wrap; align-items:stretch; gap:1.5rem; }
        .recommend-info { flex:1 1 240px; min-width:240px; }
        .recommend-badge { font-size:2.75rem; font-weight:800; width:200px; height:200px; border-radius:50%; display:flex; align-items:center; justify-content:center; color:#fff; margin-left:auto; position:relative; }
        .recommend-badge small { position:absolute; bottom:18px; font-size:.75rem; font-weight:600; letter-spacing:1px; opacity:.85; }
        .strand-tag { background:#f1f5fa; border-radius:999px; padding:.4rem .75rem; font-size:.7rem; font-weight:600; letter-spacing:.5px; display:inline-block; margin:.25rem .35rem .25rem 0; }
        .strand-list-grid { display:grid; gap:1rem; grid-template-columns:repeat(auto-fill,minmax(260px,1fr)); }
        .strand-box { border:1px solid #d9e2ee; background:#fff; border-radius:16px; padding:1rem 1rem 1.1rem; position:relative; display:flex; flex-direction:column; min-height:170px; }
        .strand-box h4 { font-size:.95rem; font-weight:800; margin:0 0 .4rem; letter-spacing:.5px; }
        .strand-box p { font-size:.65rem; line-height:1.05rem; margin:0 0 .55rem; flex:1 1 auto; }
        .strand-box .pct { font-size:.75rem; font-weight:700; position:absolute; top:.8rem; right:.9rem; }
        .chart-legend { display:flex; flex-wrap:wrap; gap:.65rem 1.2rem; margin-top:1rem; font-size:.65rem; }
        .legend-item { display:flex; align-items:center; gap:.35rem; font-weight:600; }
        .legend-swatch { width:14px; height:14px; border-radius:4px; box-shadow:0 0 0 1px #fff, 0 0 0 1px rgba(0,0,0,.15) inset; }
        .compat-chart { max-width:220px; max-height:220px; width:100%; height:auto; display:block; margin:0 auto; }
        /* Quiz table */
        .quiz-table { width:100%; border-collapse:separate; border-spacing:0 6px; font-size:.78rem; }
        .quiz-table thead th { font-size:.65rem; text-transform:uppercase; letter-spacing:1px; font-weight:700; color:#506680; border-bottom:1px solid #dbe4ef; padding:.55rem .65rem; background:#f5f8fc; }
        .quiz-table tbody tr { background:#ffffff; box-shadow:0 2px 6px -2px rgba(0,0,0,.05); }
        .quiz-table tbody td { padding:.6rem .65rem; vertical-align:middle; border-top:1px solid #eef3f8; }
        .quiz-table tbody tr:first-child td { border-top:none; }
        .badge-pill { border-radius:999px; padding:.25rem .55rem; font-size:.6rem; font-weight:600; letter-spacing:.5px; display:inline-block; }
        /* Medal badge styles for top strands */
        .medal-badge {
            display: inline-block;
            border-radius: 50%;
            width: 38px;
            height: 38px;
            font-size: 1.2rem;
            font-weight: 700;
            text-align: center;
            line-height: 38px;
            margin-bottom: 8px;
            box-shadow: 0 2px 8px -2px rgba(0,0,0,.10);
        }
        .medal-gold { background: linear-gradient(135deg, #ffd700 70%, #fffbe6 100%); color: #bfa100; border: 2px solid #ffe066; }
        .medal-silver { background: linear-gradient(135deg, #c0c0c0 70%, #f8f8f8 100%); color: #888; border: 2px solid #e0e0e0; }
        .medal-bronze { background: linear-gradient(135deg, #cd7f32 70%, #fbeee6 100%); color: #a05a2c; border: 2px solid #e6c3a5; }
        .score-badge { background:#eef7ff; color:#1063c9; }
        .streak-badge { background:#fff4e5; color:#b46900; }
        .shield-badge { background:#e8f9f6; color:#0b6b5c; }
        .empty-hint { font-size:.75rem; color:#6b7d90; padding:.75rem 0; }
        @@media (max-width:850px){ .quiz-table thead { display:none; } .quiz-table tbody tr { display:block; margin-bottom:10px; } .quiz-table tbody td { display:flex; justify-content:space-between; border:none; border-bottom:1px dashed #e1e8f0; } .quiz-table tbody td:last-child { border-bottom:none; } .quiz-table tbody td:before { content:attr(data-label); font-weight:600; color:#4a6175; text-transform:uppercase; font-size:.55rem; letter-spacing:.5px; } }
    </style>
}

<h2 class="fw-bold mb-4" style="letter-spacing:1px;">Your Results</h2>

@if (!Model.HasHonored)
{
    <div class="alert alert-info">Your first completed assessment will appear here once finished.</div>
}

<div class="row g-4 mb-4">
    <div class="col-12 col-lg-6 d-flex">
        <div class="result-card w-100">
            <h3>Recommended Strand</h3>
            @if (Model.Recommendation is null)
            {
                <p class="text-muted mb-0">No honored assessment yet.</p>
            }
            else
            {
                var rec = Model.Recommendation;
                <div class="recommend-wrapper">
                    <div class="recommend-info">
                        <div class="mb-2" style="font-size:.75rem; font-weight:700; letter-spacing:.5px; opacity:.75;">FIRST ASSESSMENT RESULT</div>
                        <div style="font-size:1.6rem; font-weight:800; color:@rec.Color;">@rec.Name.ToUpperInvariant()</div>
                        <p class="mt-2 mb-3" style="font-size:.8rem; line-height:1.15rem;">@rec.Description</p>
                        <div>
                            <span class="strand-tag">Alignment Score</span>
                            <span class="strand-tag">First Attempt</span>
                        </div>
                        <div class="mt-3">
                            <a asp-controller="StudentStrandQuiz" asp-action="StartFromAssessment" asp-route-strandId="@rec.StrandId" class="btn btn-sm btn-outline-primary">🎯 Take @rec.Name Quiz</a>
                            <button type="button" class="btn btn-sm btn-outline-secondary ms-2" data-bs-toggle="modal" data-bs-target="#strandDetailsModal">View</button>
                        </div>
                    </div>
                    <div class="recommend-badge" style="background:@rec.Color;">@rec.Percent.ToString("0.#")% <small>Score</small></div>
                </div>
            }
        </div>
    </div>
    <div class="col-12 col-lg-6 d-flex">
        <div class="result-card w-100">
            <h3>Strand Compatibility</h3>
            @if (Model.HonoredScores.Any())
            {
                <canvas id="strandPie" class="compat-chart" width="220" height="220" aria-label="Strand compatibility chart" role="img"></canvas>
                <div class="chart-legend">
                    @foreach (var s in Model.HonoredScores)
                    {
                        <div class="legend-item"><span class="legend-swatch" style="background:@s.Color;"></span><span>@s.Name (@s.Percent.ToString("0.#")%)</span></div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted mb-0">Chart will display after first assessment.</p>
            }
        </div>
    </div>
</div>
<div class="row g-4 mb-4">
    <div class="col-12">
        <div class="result-card">
            <h3>Quiz Results <span class="text-muted" style="font-size:.65rem; font-weight:600; letter-spacing:1px;">(Recent)</span></h3>
            @if(!quizResults.Any())
            {
                <p class="empty-hint mb-0">No quiz attempts yet. Launch one from a recommended strand.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="quiz-table" aria-label="Recent quiz results">
                        <thead>
                            <tr>
                                <th>Quiz</th>
                                <th>Strand</th>
                                <th>Attempt</th>
                                <th>Score</th>
                                <th>Correct</th>
                                <th>Shields</th>
                                <th>Max Streak</th>
                                <th>Finished</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach(var q in quizResults)
                        {
                            <tr>
                                <td data-label="Quiz">@q.Title</td>
                                <td data-label="Strand">@q.StrandName</td>
                                <td data-label="Attempt">#@q.AttemptNumber</td>
                                <td data-label="Score"><span class="badge-pill score-badge">@(((double)q.ScorePercent).ToString("0.##"))%</span></td>
                                <td data-label="Correct">@q.CorrectAnswers/@q.TotalQuestions</td>
                                <td data-label="Shields"><span class="badge-pill shield-badge">@q.ShieldsRemaining</span></td>
                                <td data-label="Max Streak"><span class="badge-pill streak-badge">@q.MaxStreakAchieved</span></td>
                                <td data-label="Finished">@(((DateTime)q.CompletedAt).ToLocalTime().ToString("MMM d, hh:mm tt"))</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>
<div class="row g-4">
    <div class="col-12">
        <div class="result-card">
            <h3>All Strands</h3>
            <div class="strand-list-grid">
                @foreach (var s in Model.AllStrands.OrderByDescending(i => i.Percent))
                {
                    var pctText = s.Percent.HasValue ? s.Percent.Value.ToString("0.#") + "%" : "--";
                    <div class="strand-box">
                        <h4 style="color:@s.Color;">@s.Name</h4>
                        <div class="pct" style="color:@s.Color;">@pctText</div>
                        @if (!string.IsNullOrEmpty(s.Badge))
                        {
                            var medalClass = s.Badge == "Top 1" ? "medal-gold" : s.Badge == "Top 2" ? "medal-silver" : "medal-bronze";
                            <span class="medal-badge @medalClass" title="@s.Badge">
                                @(s.Badge == "Top 1" ? "🥇" : s.Badge == "Top 2" ? "🥈" : "🥉")
                            </span>
                        }
                        <p>@s.Description</p>
                        <div><span class="strand-tag" style="background:#f5f8fc;">@((s.Percent.HasValue ? "Ranked" : "Not Evaluated"))</span></div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Strand details modal (for the student's View button) -->
    <div class="modal fade" id="strandDetailsModal" tabindex="-1" aria-labelledby="strandDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="strandDetailsModalLabel">Answers, Questions and Weights</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Answers panel: show numbered questions and raw per-strand weights -->
                    <div class="card" style="margin-top:0; border:0; box-shadow:none;">
                        <div class="card-body" style="padding:0;">
                            <div style="padding:1rem; border-bottom:1px solid #e9ecef; font-weight:700;">Answers</div>
                            <div id="studentAnswersContent" style="max-height:320px; overflow:auto; padding:0.75rem 1rem;">
                                <div id="studentAnswersSpinner" style="display:none; padding:1rem; text-align:center;">Loading...</div>
                                <!-- answers will be injected here -->
                            </div>
                            <div style="padding:0.75rem 1rem; border-top:1px solid #e9ecef; text-align:right;">
                                <button id="btnHideAnswers" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js"></script>
    <script>
        (function(){
            var data = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                Model.HonoredScores.Select(s => new { s.Name, s.Percent, s.Color })
            ));
            if(data.length && document.getElementById('strandPie')){
                var ctx = document.getElementById('strandPie').getContext('2d');
                new Chart(ctx, { type: 'pie', data: { labels: data.map(x=>x.Name), datasets: [{ data: data.map(x=>x.Percent), backgroundColor: data.map(x=>x.Color), borderWidth: 1, borderColor: '#fff' }] }, options: { maintainAspectRatio:true, plugins:{ legend:{ display:false }, tooltip:{ callbacks:{ label:function(ctx){ var v=ctx.parsed; return ' '+ctx.label+': '+v.toFixed(2)+'%'; } } } } } });
            }
        })();
    </script>
    <script>
        (function(){
            var modalEl = document.getElementById('strandDetailsModal');
            var content = document.getElementById('studentAnswersContent');
            var spinner = document.getElementById('studentAnswersSpinner');
            var hideBtn = document.getElementById('btnHideAnswers');

            function formatStrandRows(rows){
                if(!rows || rows.length==0) return '<div class="text-muted">No weights</div>';
                var html = '<div class="list-group">';
                rows.forEach(function(r){
                    html += '<div class="list-group-item d-flex justify-content-between align-items-center p-2">'
                        + '<div style="font-weight:600;">' + escapeHtml(r.strand) + '</div>'
                        + '<div class="text-muted">' + r.weight + '</div>'
                        + '</div>';
                });
                html += '</div>';
                return html;
            }

            function escapeHtml(s){ return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }

            async function loadAnswers(){
                spinner.style.display = '';
                try{
                    var res = await fetch('/StudentStrandQuiz/MyAnswers');
                    if(!res.ok) throw new Error('Fetch failed');
                    var json = await res.json();
                    var data = json.data || [];
                    if(!data.length){
                        content.innerHTML = '<div class="text-muted p-2">No answers available.</div>';
                        return;
                    }
                    var html = '';
                    data.forEach(function(q, idx){
                        html += '<div style="margin-bottom:0.8rem;">';
                        // Question title
                        html += '<div style="font-weight:700; margin-bottom:6px;">' + (idx+1) + '. ' + escapeHtml(q.question) + '</div>';
                        // Student's selected answer (new)
                        var selectedText = (q.selectedLetter ? (q.selectedLetter + '. ') : '') + (q.selectedOption || '');
                        html += '<div style="margin-bottom:6px;"><span style="font-weight:700;">Your answer: </span>' + escapeHtml(selectedText);
                        if(q.isCorrect === true){
                            html += ' <span class="badge-pill score-badge" style="margin-left:.5rem;">Correct</span>';
                        }
                        // Weights block (existing)
                        html += '<div style="margin-top:6px; font-weight:700;">Weights</div>';
                        html += formatStrandRows(q.strandWeights);
                        html += '</div>';
                    });
                    content.innerHTML = html;
                }catch(err){
                    content.innerHTML = '<div class="text-danger p-2">Failed to load answers.</div>';
                }finally{
                    spinner.style.display = 'none';
                }
            }

            // Load answers when the modal is shown
            if(modalEl){
                modalEl.addEventListener('shown.bs.modal', function(){
                    if(content) content.innerHTML = '<div id="studentAnswersSpinner" style="padding:1rem; text-align:center;">Loading...</div>';
                    loadAnswers();
                });
                modalEl.addEventListener('hidden.bs.modal', function(){
                    if(content) content.innerHTML = '';
                });
            }
            if(hideBtn){
                // hide button uses data-bs-dismiss="modal" attribute; nothing else needed
            }
        })();
    </script>
}
