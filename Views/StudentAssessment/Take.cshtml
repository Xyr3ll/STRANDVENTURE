@model StudentAssessmentTakeViewModel
@{
    ViewData["Title"] = "Assessment";
    var attemptId = Model.AttemptId;
}

@section Styles {
    <link rel="stylesheet" href="~/css/assessment-take.css" asp-append-version="true" />
    <!-- Font Awesome for music control icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .achievement-toast { position:fixed; top:20px; right:20px; background:#0b1e33; color:#fff; padding:14px 18px; border-radius:14px; box-shadow:0 6px 24px -4px rgba(0,0,0,.5); display:flex; gap:.75rem; align-items:flex-start; width:310px; z-index:2000; animation:fadeSlide .35s ease; font-size:.85rem; line-height:1.1rem; border:1px solid #15314f; }
        .achievement-toast .icon { font-size:1.75rem; line-height:1; filter:drop-shadow(0 2px 4px rgba(0,0,0,.4)); }
        .achievement-toast h5 { font-size:.9rem; font-weight:700; letter-spacing:.5px; margin:0 0 2px; }
        .achievement-toast .close { background:transparent; border:0; color:#fff; font-size:1rem; margin-left:auto; opacity:.7; }
        .achievement-toast .close:hover { opacity:1; }
        @@keyframes fadeSlide { from { opacity:0; transform:translateY(-8px) scale(.95);} to { opacity:1; transform:translateY(0) scale(1);} }
        .badge-achievement { display:inline-flex; align-items:center; gap:.4rem; background:#13304b; color:#fff; padding:.45rem .75rem; border-radius:999px; font-size:.65rem; font-weight:600; letter-spacing:.75px; box-shadow:0 2px 8px -2px rgba(0,0,0,.4); border:1px solid #1d4972; }
        .badge-achievement .emoji { font-size:1rem; line-height:1; }
        #achievementBadgeBar { position:fixed; bottom:18px; right:18px; display:flex; flex-direction:column; gap:.6rem; z-index:1999; }
        /* Page flip animation */
        .flip-container { perspective:1600px; }
        .page-flip-enter { animation:flipIn .55s cubic-bezier(.65,.05,.36,1); }
        .page-flip-exit { animation:flipOut .45s cubic-bezier(.65,.05,.36,1) forwards; }
        @@keyframes flipIn { from { transform:rotateY(-90deg); opacity:0; } 60% { opacity:1; } to { transform:rotateY(0); opacity:1; } }
        @@keyframes flipOut { from { transform:rotateY(0); opacity:1; } to { transform:rotateY(90deg); opacity:0; } }

        /* --------- Podium + Bars layout refinements ---------- */
        .podium-overlay { align-items:center; justify-content:center; padding:1.25rem; overflow:hidden; }
        .podium-card { max-width:760px; width:100%; max-height:calc(100vh - 170px); overflow:hidden; position:relative; }
        .podium-inner { overflow:hidden; }
        .podium-grid { gap:1rem; padding:0 1rem 1.25rem; }
        .podium-col { flex:1; display:flex; flex-direction:column; justify-content:flex-end; border-radius:18px; }
        .podium-col.gold { min-height:250px !important; }
        .podium-col.silver { min-height:220px !important; }
        .podium-col.bronze { min-height:200px !important; }
        .podium-name { font-size:.8rem; letter-spacing:.5px; }
        .podium-rank { width:70px; height:70px; font-size:1.6rem; }
        .podium-actions { position:absolute; top:14px; right:18px; display:flex; flex-direction:column; gap:.4rem; }
        .reco-list { max-height:180px; overflow:auto; margin-top:.5rem; scrollbar-width:none; -ms-overflow-style:none; }
        .reco-list::-webkit-scrollbar { display:none; }
        .reco-item { font-size:.7rem; line-height:1.1rem; padding:.45rem .6rem; }
        .podium-card::-webkit-scrollbar { display:none; }
        .podium-card { scrollbar-width:none; -ms-overflow-style:none; }
        .podium-quiz-link { font-size:.7rem, letter-spacing:.5px; border-radius:999px; padding:.4rem .9rem; background:#164c85; color:#fff; text-decoration:none; display:inline-flex; align-items:center; gap:.35rem; box-shadow:0 2px 8px -2px #0007; }
        .podium-quiz-link:hover { background:#1d5fa5; }

        /* Bars overlay shrink */
        .bar-card { max-width:640px; width:100%; }
        .bar-chart { max-width:560px; margin:0 auto; }
        .bar-chart .bar-fill { font-size:.6rem; }
        .bar-chart .bar { margin:0 .35rem; }

        /* Hide scrollbars in container but allow internal scroll where needed without showing bars */
        .assessment-shell { scrollbar-width:none; -ms-overflow-style:none; }
        .assessment-shell::-webkit-scrollbar { display:none; }

        /* ---------- Strand bar: single row + collapsible on narrow ---------- */
        .strand-wrap { display:block; }
        .strand-toggle { display:none; }
        .strand-bar { display:flex; gap:.45rem; align-items:center; overflow-x:auto; overflow-y:hidden; flex-wrap:nowrap; white-space:nowrap; max-width:100%; -webkit-overflow-scrolling:touch; scrollbar-width:none; -ms-overflow-style:none; margin-top: 7px; }
        .strand-bar::-webkit-scrollbar { display:none; }

        /* ---------- Mobile responsiveness additions ---------- */
        /* Ensure large tap targets */
        .answer-tile { min-height:48px; }

        /* Background music control moved to bottom right (legacy dark) */
        .bgm-control { position:fixed; bottom:18px; right:18px; z-index:2100; display:flex; align-items:center; gap:.55rem; background:#0d2439; border:1px solid #15314f; padding:.45rem .75rem; border-radius:14px; box-shadow:0 4px 16px -4px #000a; font-size:.7rem; letter-spacing:.5px; }
        .bgm-control .label { font-weight:600; opacity:.85; }
        .bgm-control button { background:#133b5e; border:0; color:#fff; width:30px; height:30px; display:inline-flex; align-items:center; justify-content:center; border-radius:10px; cursor:pointer; }
        .bgm-control button:hover { background:#1a4f7d; }
        .bgm-control input[type=range] { width:90px; accent-color:#1e6bff; }

        /* Whiteboard BGM control (new) */
        .bgm-control.wb-bgm { position:fixed; bottom:18px; right:18px; z-index:2100; display:flex; align-items:center; gap:.6rem; background:#fff; border:2px solid #000; padding:.55rem .85rem; border-radius:18px; box-shadow:4px 4px 0 #000; font-size:.65rem; color:#000; font-weight:600; }
        .bgm-control.wb-bgm .label { text-transform:uppercase; letter-spacing:1px; opacity:.75; font-size:.55rem; color:inherit; }
        .bgm-control.wb-bgm button { background:#000; border:2px solid #000; color:#fff; width:32px; height:32px; display:inline-flex; align-items:center; justify-content:center; border-radius:10px; cursor:pointer; transition:background .18s, transform .15s; box-shadow:2px 2px 0 #000; }
        .bgm-control.wb-bgm button:hover { background:#0f62fe; }
        .bgm-control.wb-bgm button:active { transform:translateY(2px); }
        .bgm-control.wb-bgm input[type=range] { width:110px; accent-color:#0f62fe; height:4px; cursor:pointer; }

        /* Centered question box styled like answers (lowered + white background with black border) */
        .question-title { position:relative; z-index:3; align-self:center; width:min(820px,96%); margin: 15rem auto 1rem; }
        .question-box { background:#ffffff; color:#0b0f19; border-radius:18px; padding:1rem 1.2rem; box-shadow:0 6px 20px -6px rgba(0,0,0,.35), 0 0 0 1px #1d2c47; display:flex; align-items:center; justify-content:center; text-align:center; border:2px solid #000; }
        .question-box h3 { margin:0; font-size:1.05rem; letter-spacing:.4px; }

        @@media (max-width: 640px){
            .bgm-control { bottom:calc(env(safe-area-inset-bottom) + 14px); right:calc(env(safe-area-inset-right) + 14px); }
            .question-title { margin-top: 15rem; }
            .question-box h3 { font-size:1rem; }
        }

        @@media (max-width: 800px) {
            .assessment-shell { padding-left: max(12px, env(safe-area-inset-left)); padding-right: max(12px, env(safe-area-inset-right)); }
            h2.fw-bold.mb-4 { font-size:1.25rem; margin-bottom:.75rem !important; }
            .question-header { padding: .6rem .6rem .8rem; display:grid; grid-template-columns: 1fr auto; grid-template-areas: 'strands meta' 'text text'; column-gap:.5rem; row-gap:.4rem; align-items:center; }
            .question-header h3, #questionText { grid-area:text; font-size:1.02rem; line-height:1.35; padding:0; text-align:left; }
            .strand-wrap { grid-area: strands; display:flex; flex-direction:column; gap:.25rem; min-width:0; }
            .question-meta { grid-area: meta; position:static; top:auto; right:auto; width:auto; align-self:center; display:flex; justify-content:flex-end; gap:.45rem; margin-top:0; min-width:0; }
            .strand-toggle { display:inline-flex; align-items:center; gap:.35rem; font-size:.68rem; padding:.3rem .55rem; background:#0f2a46; color:#fff; border:1d solid #1d4972; border-radius:12px; width:max-content; box-shadow:0 2px 6px -2px rgba(0,0,0,.45); }
            .strand-toggle::after { content:'\25BE'; font-size:.8rem; line-height:1; opacity:.85; }
            .strand-wrap.open .strand-toggle::after { transform:rotate(180deg); }
            .strand-wrap .strand-bar { display:none; position:static; max-width:100%; width:100%; gap:.45rem; padding-bottom:.1rem; margin-bottom:.05rem; }
            .strand-wrap.open .strand-bar { display:flex; }
            /* Keep the chips to one row with horizontal scroll */
            .strand-bar { flex-wrap:nowrap; overflow-x:auto; }
            .strand-chip { font-size:.68rem; padding:.3rem .5rem; white-space:nowrap; }
            .assessment-content { min-height:60vh; padding:.8rem .75rem 1.25rem; }
            .answers-grid { display:grid; grid-template-columns: 1fr; gap:.6rem; margin-top:auto; }
            .answer-tile { padding:.8rem .95rem .8rem 3.1rem; font-size:.98rem; text-align:left; border-radius:14px; }
            .answer-tile .choice-dot { font-size:.9rem; }
            /* Overlays and cards full-bleed */
            .bar-card, .podium-card { max-width:none; width:100%; height:auto; border-radius:16px; }
            .bar-chart { max-width:100%; }
            .podium-actions { top:8px; right:8px; gap:.35rem; }
            .podium-rank { width:56px; height:56px; font-size:1.25rem; }
            .podium-name { font-size:.75rem; }
            .reco-item { font-size:.78rem; line-height:1.2rem; }
            /* Toasts/badges respect safe areas */
            .achievement-toast { top:auto; right:calc(env(safe-area-inset-right) + 16px); left:calc(env(safe-area-inset-left) + 16px); bottom:calc(env(safe-area-inset-bottom) + 16px); width:auto; font-size:.9rem; }
            #achievementBadgeBar { right:calc(env(safe-area-inset-right) + 12px); bottom:calc(env(safe-area-inset-bottom) + 12px); }
            /* Countdown size */
            #countdownOverlay { font-size:2.4rem; }
            /* Footer safe area */
            .assessment-footer-stick { padding-bottom: calc(env(safe-area-inset-bottom) + 8px); }
        }

        /* Extra narrow tweaks */
        @@media (max-width: 400px){
            .progress-pill { font-size:.7rem; padding:.2rem .5rem; }
            .question-audio { width:36px; height:36px; font-size:1rem; line-height:36px; }
            .assessment-content { min-height:55vh; }
        }

        @@media (min-width: 577px) and (max-width: 768px) {
            .question-header h3, #questionText { font-size:1.2rem; }
            .strand-bar { display:flex; gap:.5rem; flex-wrap:nowrap; position:static; max-width:100%; overflow-x:auto; }
            .answers-grid { display:grid; grid-template-columns: 1fr 1fr; gap:.75rem; }
            .answer-tile { padding:1rem 1.1rem 1rem 3.2rem; font-size:1rem; }
            .bar-card { max-width:700px; }
            .podium-card { max-width:820px; }
        }
    </style>
}

<h2 class="fw-bold mb-4" style="letter-spacing:1px; text-shadow:0 0 16px #1e6bff55;">Assessment</h2>
<div class="assessment-shell flip-container page-flip-enter mb-4">
    <div id="starFX"></div>
    <div id="achievementBadgeBar"></div>
    <div id="achievementToastContainer"></div>
    @if(!Model.IsCompleted && Model.CurrentQuestion != null){
        <div class="assessment-stage" id="assessmentStage" data-attempt="@attemptId" data-total="@Model.TotalQuestions" data-answered="@Model.AnsweredQuestions">
            <div class="assessment-bg"></div>
            <div class="question-header">
                <div class="strand-wrap" id="strandWrap">
                    <button type="button" class="strand-toggle" id="strandToggle" aria-expanded="false" aria-controls="strandMiniBar" title="Show strand scores">Strands</button>
                    <div class="strand-bar" id="strandMiniBar" role="region" aria-label="Top strand scores">
                        @foreach(var s in Model.StrandScores.Take(4)){
                            var color = string.IsNullOrWhiteSpace(s.Color) ? "#1e6bff" : s.Color;
                            <span class="strand-chip" style="background:linear-gradient(135deg,@color,#1e6bff);"> @s.ScorePercent.ToString("0.##")%</span>
                        }
                    </div>
                </div>
                <div class="question-meta">
                    <button type="button" class="question-audio" id="readQuestionBtn" aria-label="Read question aloud" title="Read question" data-state="idle">🔊</button>
                    <div class="progress-pill">@(@Model.AnsweredQuestions + 1) of @Model.TotalQuestions</div>
                </div>
            </div>
            <div class="assessment-content" id="assessmentContent" style="visibility:@(Model.AnsweredQuestions == 0 ? "hidden" : "visible");">
                <!-- Centered question box -->
                <div class="question-title">
                    <div class="question-box">
                        <h3 id="questionText">@Model.CurrentQuestion.Text</h3>
                    </div>
                </div>
                <div class="answers-grid" id="answersGrid">
                    @foreach(var o in Model.CurrentQuestion.Options){
                        var letter = o.Letter?.ToUpperInvariant();
                        var tileClass = letter switch { "A" => "tile-A", "B" => "tile-B", "C" => "tile-C", "D" => "tile-D", _ => "tile-A" };
                        <form class="answer-form" data-letter="@letter" data-text="@o.Text" data-question-id="@Model.CurrentQuestion.Id" data-option-id="@o.Id">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="answer-tile @tileClass" data-answer-btn>
                                <span class="choice-dot">@letter</span> &nbsp;&nbsp;&nbsp;
                                <span>@o.Text</span>
                            </button>
                        </form>
                    }
                </div>
            </div>
            <div id="feedbackOverlay" class="feedback-overlay" style="display:none;">
                <div class="feedback-card" role="alert" aria-live="assertive">
                    <div class="icon">✔</div>
                    <h4 class="mb-2 fw-bold" style="font-size:1.35rem; letter-spacing:.5px;">Response Recorded!</h4>
                    <p class="mb-0" style="font-size:.9rem; opacity:.9;">Updating strand scores...</p>
                </div>
            </div>
            <div id="barsOverlay" class="bars-overlay" style="display:none;">
                <div class="bar-card">
                    <h3>Stars Point Collection</h3>
                    <div class="bar-chart" id="barChart"></div>
                    <br />
                    <br />
                    <button type="button" class="next-btn" id="nextBtn">Next</button>
                </div>
            </div>
            <div id="podiumOverlay" class="podium-overlay" style="display:none;">
                <div class="podium-card">
                    <div class="podium-actions">
                        <a id="viewResultsLink" href="#" class="btn btn-sm btn-primary">See detailed results ▶</a>
                        <a id="takeTopQuizLink" href="#" class="podium-quiz-link" style="display:none;">🎯 Take Strand Quiz</a>
                    </div>
                    <div class="podium-inner">
                        <div class="podium-header">
                            <h3 style="margin-right:4.5rem;">Strand Recommendation</h3>
                            <div class="podium-tabs"><button type="button" disabled>Podium</button></div>
                        </div>
                        <div class="podium-grid" id="podiumGrid"></div>
                        <div class="reco-list" id="recoList"></div>
                    </div>
                </div>
            </div>
            @if(Model.AnsweredQuestions == 0){
                <div id="countdownOverlay" class="countdown-overlay" role="status" aria-live="polite">3</div>
            }
        </div>
    }
    else {
        <div class="assessment-complete">
            <h3 class="fw-bold mb-3">Assessment Completed</h3>
            <p class="text-muted mb-4">Great job! You can now review your strand alignment results.</p>
            <a asp-controller="StudentResults" asp-action="Index" class="btn btn-primary btn-lg px-4">View Results</a>
        </div>
    }
</div>
<p class="assessment-footer-stick">&copy; 2025 STRANDVENTURE. All rights reserved.</p>

<!-- Background music elements -->
<audio id="bgMusic" loop preload="auto" style="display:none;">
    <source src="/media/quiz-bgm.mp3" type="audio/mpeg" />
</audio>
<div class="bgm-control" id="bgmCtl" aria-label="Background music controls">
  <span class="label" style="color:white;">BGM</span>
  <button type="button" id="bgmPlayPause" aria-label="Pause background music"><i class="fa-solid fa-pause"></i></button>
  <input type="range" id="bgmVolume" min="0" max="1" step="0.01" aria-label="Background music volume" />
</div>

<script>
(function(){
  var assessmentStage = document.getElementById('assessmentStage');
  var attemptId = assessmentStage ? assessmentStage.getAttribute('data-attempt') : null;
  var totalQuestions = assessmentStage ? parseInt(assessmentStage.getAttribute('data-total')||'0',10) : 0;
  var answeredSoFar = assessmentStage ? parseInt(assessmentStage.getAttribute('data-answered')||'0',10) : 0;
  var halfThreshold = Math.ceil(totalQuestions / 2);
  var halfwayToastShown = false;
  var content = document.getElementById('assessmentContent');
  var starLayer = document.getElementById('starFX');
  var toastContainer = document.getElementById('achievementToastContainer');
  var badgeBar = document.getElementById('achievementBadgeBar');
  var shell = document.querySelector('.assessment-shell');
  var countdown = document.getElementById('countdownOverlay');

  // Background Music Persistence & Controls (shared behavior with quiz Play page)
  var music = document.getElementById('bgMusic');
  var volSlider = document.getElementById('bgmVolume');
  var playPauseBtn = document.getElementById('bgmPlayPause');
  var STORE_KEY = 'quiz_bgm_state_v1';
  var DEFAULT_VOL = 0.25;
  function loadState(){ try { return JSON.parse(localStorage.getItem(STORE_KEY)||'{}'); } catch { return {}; } }
  function saveState(st){ localStorage.setItem(STORE_KEY, JSON.stringify(st)); }
  var state = loadState();
  var startTime = typeof state.t === 'number' ? state.t : 0;
  var startVol = typeof state.vol === 'number' ? state.vol : DEFAULT_VOL;
  var startPlaying = state.playing !== false; // default: play
  if(music && volSlider && playPauseBtn){
     music.volume = Math.min(1, Math.max(0, startVol));
     volSlider.value = music.volume;
     var tryStart = function(){
        if(startTime > 0 && !isNaN(startTime)){
           var applyTime = function(){ if(music.duration && startTime < music.duration) music.currentTime = startTime % music.duration; };
           if(isFinite(music.duration)) applyTime(); else music.addEventListener('loadedmetadata', applyTime, { once:true });
        }
        if(startPlaying){ music.play().catch(function(){}); }
        updateButton();
     };
     var gestureStart = function(){ tryStart(); document.removeEventListener('click', gestureStart); };
     document.addEventListener('click', gestureStart);
     tryStart();
     setInterval(function(){ if(!music.paused){ saveState({ t: music.currentTime, vol: music.volume, playing: !music.paused }); } }, 1500);
     var persist = function(){ saveState({ t: music.currentTime, vol: music.volume, playing: !music.paused }); };
     document.addEventListener('visibilitychange', persist);
     window.addEventListener('beforeunload', persist);
     volSlider.addEventListener('input', function(){ music.volume = parseFloat(volSlider.value); persist(); });
     function updateButton(){
        if(music.paused){ playPauseBtn.innerHTML = '<i class="fa-solid fa-play"></i>'; playPauseBtn.setAttribute('aria-label','Play background music'); }
        else { playPauseBtn.innerHTML = '<i class="fa-solid fa-pause"></i>'; playPauseBtn.setAttribute('aria-label','Pause background music'); }
     }
     playPauseBtn.addEventListener('click', function(){ if(music.paused){ music.play().catch(function(){}); } else { music.pause(); } persist(); updateButton(); });
  }

  // TTS controls
  var ttsBtn = document.getElementById('readQuestionBtn');
  var synth = ('speechSynthesis' in window) ? window.speechSynthesis : null;
  var speaking = false;
  function stopTTS(){
    try{ if(synth){ synth.cancel(); } }catch(_){ }
    speaking = false;
    if(ttsBtn){ ttsBtn.textContent='\ud83d\udd0a'; ttsBtn.setAttribute('data-state','idle'); }
  }

  function showAchievementToast(data){
    if(!data) return;
    if(data.code && (data.code === 'HALFWAY_HERO')) halfwayToastShown = true;
    var wrap = document.createElement('div');
    wrap.className='achievement-toast';
    var icon = document.createElement('div'); icon.className='icon'; icon.textContent = data.icon || '\ud83c\udfc5';
    var inner = document.createElement('div');
    var title = document.createElement('h5'); title.textContent = data.name || 'Achievement Unlocked';
    var desc = document.createElement('div'); desc.textContent = data.description || ''; desc.style.opacity='.85';
    inner.appendChild(title); inner.appendChild(desc);
    var close = document.createElement('button'); close.className='close'; close.type='button'; close.innerHTML='&times;'; close.onclick=function(){ wrap.remove(); };
    wrap.appendChild(icon); wrap.appendChild(inner); wrap.appendChild(close);
    toastContainer.appendChild(wrap);
    setTimeout(function(){ if(wrap.parentNode) wrap.parentNode.removeChild(wrap); },7000);
    var badge = document.createElement('div'); badge.className='badge-achievement';
    var bEmoji = document.createElement('span'); bEmoji.className='emoji'; bEmoji.textContent=data.icon||'\ud83c\udfc5';
    var bTxt = document.createElement('span'); bTxt.textContent=(data.name||'Achievement').toUpperCase();
    badge.appendChild(bEmoji); badge.appendChild(bTxt);
    badgeBar.appendChild(badge);
    setTimeout(function(){ badge.style.opacity='0'; setTimeout(function(){ if(badge.parentNode) badge.parentNode.removeChild(badge); },600); },20000);
  }
  function maybeShowHalfwayClientSide(){ return; }
  function spawnStars(count){ if(!starLayer) return; for(var i=0;i<count;i++){ var s=document.createElement('div'); s.className='star-spark'+(Math.random()>0.8?' big':''); var x=Math.random()*window.innerWidth; var y=(Math.random()*160)+260; var drift=(Math.random()*120)-60; s.style.left=x+'px'; s.style.top=y+'px'; s.style.setProperty('--x','0px'); s.style.setProperty('--y','0px'); s.style.setProperty('--x-end', drift+'px'); starLayer.appendChild(s); (function(el){ setTimeout(function(){ if(el&&el.parentNode) el.parentNode.removeChild(el); },2100); })(s);} }
  if(countdown){ var n=3; (function tick(){ if(n===0){ if(countdown.parentNode) countdown.parentNode.removeChild(countdown); if(content) content.style.visibility='visible'; spawnStars(30); return;} countdown.textContent=n; n--; setTimeout(tick,900);} )(); } else { setTimeout(function(){ spawnStars(20); },300);} setInterval(function(){ spawnStars(6); },4500);

  var answerForms=document.querySelectorAll('.answer-form');
  for(var af=0; af<answerForms.length; af++){ (function(f){ f.addEventListener('submit', function(e){ e.preventDefault();
      stopTTS();
      if(f.getAttribute('data-submitting')==='1') return; f.setAttribute('data-submitting','1'); var btn=f.querySelector('[data-answer-btn]'); var allBtns=document.querySelectorAll('[data-answer-btn]'); for(var bi=0; bi<allBtns.length; bi++){ allBtns[bi].disabled=true; } if(btn) btn.classList.add('selected'); showFeedback(); var questionId=f.getAttribute('data-question-id'); var optionId=f.getAttribute('data-option-id'); var token=document.querySelector('input[name="__RequestVerificationToken"]'); token=token?token.value:''; var bodyData='__RequestVerificationToken='+encodeURIComponent(token)+'&attemptId='+encodeURIComponent(attemptId||'')+'&questionId='+encodeURIComponent(questionId||'')+'&optionId='+encodeURIComponent(optionId||''); fetch('@Url.Action("AnswerAjax","StudentAssessment")',{ method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: bodyData }).then(r=> r.json()).then(function(data){ setTimeout(function(){ hideFeedback(); if(data.success){ answeredSoFar++; if(data.halfway){ showAchievementToast(data.halfway); } else { maybeShowHalfwayClientSide(); } if(data.completed){ showPodium(data.strandScores||[], data.nextUrl, data.topQuizUrl); spawnStars(50);} else { showBars(data.strandScores||[], data.completed, data.nextUrl); updateMiniBar(data.strandScores||[]); spawnStars(18);} } else { window.location.reload(); } },1200); }).catch(function(){ window.location.reload(); }); }); })(answerForms[af]); }

  function showFeedback(){ stopTTS(); var fo=document.getElementById('feedbackOverlay'); if(fo) fo.style.display='flex'; }
  function hideFeedback(){ var fo=document.getElementById('feedbackOverlay'); if(fo) fo.style.display='none'; }
  function updateMiniBar(scores){ var bar=document.getElementById('strandMiniBar'); if(!bar) return; bar.innerHTML=''; var list=scores||[]; for(var i=0;i<list.length && i<4;i++){ var s=list[i]; var chip=document.createElement('span'); chip.className='strand-chip'; chip.style.background='linear-gradient(135deg,'+(s.color||'#1e6bff')+',#1e6bff)'; var pct=(typeof s.percent==='number')?s.percent.toFixed(2):'0'; chip.appendChild(document.createTextNode(pct+'%')); bar.appendChild(chip);} }
  function showBars(scores, completed, nextUrl){ stopTTS(); var bo=document.getElementById('barsOverlay'); var chart=document.getElementById('barChart'); if(!bo||!chart) return; chart.innerHTML=''; var arr=(scores||[]).slice(); arr.sort(function(a,b){ return (b.percent||0)-(a.percent||0); }); var topFive=arr.slice(0,5); var anyFractional=false; for(var i=0;i<topFive.length;i++){ var p=topFive[i].percent; if(typeof p==='number' && p>0 && p<=1){ anyFractional=true; break;} } var normalized=[]; for(var j=0;j<topFive.length;j++){ var s=topFive[j]; var v= typeof s.percent==='number'? s.percent:0; if(anyFractional && v<=1) v*=100; if(v>100) v=100; if(v<0) v=0; normalized.push({ name: s.name, value: v, color: s.color || '#1e6bff'}); } for(var k=0;k<normalized.length;k++){ var ns=normalized[k]; var bar=document.createElement('div'); bar.className='bar'; var fill=document.createElement('div'); fill.className='bar-fill'; fill.style.background='linear-gradient(180deg,'+ns.color+',#0b1626)'; fill.style.height='0%'; (function(f,v){ setTimeout(function(){ f.style.height=v+'%'; },35); })(fill, ns.value); fill.appendChild(document.createTextNode(ns.value.toFixed(1)+'%')); var label=document.createElement('div'); label.className='bar-label'; label.appendChild(document.createTextNode(ns.name)); bar.appendChild(fill); bar.appendChild(label); if(ns.value>=50){ var star=document.createElement('div'); star.className='bar-star'; star.appendChild(document.createTextNode('⭐')); bar.appendChild(star);} chart.appendChild(bar);} bo.style.display='flex'; var nextBtn=document.getElementById('nextBtn'); if(nextBtn){ nextBtn.onclick=function(){ triggerPageFlip(nextUrl); }; } }
  function triggerPageFlip(url){ stopTTS(); if(!shell){ window.location.href=url; return;} shell.classList.remove('page-flip-enter'); shell.classList.add('page-flip-exit'); setTimeout(function(){ window.location.href=url; },420); }
  function showPodium(scores, resultsUrl, topQuizUrl){ stopTTS(); var podium=document.getElementById('podiumOverlay'); var grid=document.getElementById('podiumGrid'); var list=document.getElementById('recoList'); var viewLink=document.getElementById('viewResultsLink'); var quizLink=document.getElementById('takeTopQuizLink'); if(!podium||!grid||!list) return; grid.innerHTML=''; list.innerHTML=''; var ordered=(scores||[]).slice(); ordered.sort(function(a,b){ return (b.percent||0)-(a.percent||0); }); var top3=ordered.slice(0,3); function makeCol(strand, rankClass, rankNum){ var col=document.createElement('div'); col.className='podium-col '+rankClass; var circle=document.createElement('div'); circle.className='podium-rank'; circle.appendChild(document.createTextNode(rankNum.toString())); var name=document.createElement('div'); name.className='podium-name'; name.appendChild(document.createTextNode((strand&&strand.name)||'')); col.appendChild(circle); col.appendChild(name); return col; } if(top3.length){ if(top3[1]) grid.appendChild(makeCol(top3[1],'silver',2)); grid.appendChild(makeCol(top3[0],'gold',1)); if(top3[2]) grid.appendChild(makeCol(top3[2],'bronze',3)); } for(var r=0;r<top3.length;r++){ var s=top3[r]; var item=document.createElement('div'); item.className='reco-item'; var pct=(s.percent||0).toFixed(2); var strong=document.createElement('strong'); strong.appendChild(document.createTextNode((s.name||'Strand')+' ('+pct+'%)')); item.appendChild(strong); var desc=(s.description||'Shows strong potential.'); item.appendChild(document.createTextNode(' '+desc)); list.appendChild(item);} if(viewLink) viewLink.href = resultsUrl || '@Url.Action("Index","StudentResults")'; if(quizLink){ if(topQuizUrl){ quizLink.href=topQuizUrl; quizLink.style.display='inline-flex'; } else { quizLink.style.display='none'; } } podium.style.display='flex'; }
  
  // TTS init and toggle
  if(ttsBtn){
    if(!synth){ ttsBtn.disabled = true; }
    else {
      var buildUtter = function(){
        var q=(document.getElementById('questionText')?document.getElementById('questionText').innerText:'')||'';
        var forms=document.querySelectorAll('.answer-form');
        var parts=[]; for(var i=0;i<forms.length;i++){ var f=forms[i]; parts.push(f.getAttribute('data-letter')+'. '+f.getAttribute('data-text')); }
        return q+'. Options: '+parts.join('. ')+'.';
      };
      ttsBtn.addEventListener('click',function(){
        if(speaking){ stopTTS(); return; }
        var u=new SpeechSynthesisUtterance(buildUtter());
        u.onend=function(){ speaking=false; if(ttsBtn){ ttsBtn.textContent='\ud83d\udd0a'; ttsBtn.setAttribute('data-state','idle'); } };
        u.onerror=function(){ speaking=false; if(ttsBtn){ ttsBtn.textContent='\ud83d\udd0a'; ttsBtn.setAttribute('data-state','idle'); } };
        speaking=true; if(ttsBtn){ ttsBtn.textContent='\u23F9'; ttsBtn.setAttribute('data-state','speaking'); }
        try{ synth.cancel(); }catch(_){ }
        synth.speak(u);
      });
    }
  }

  // Strand bar toggle (collapsible on narrow screens)
  var strandWrap = document.getElementById('strandWrap');
  var strandToggle = document.getElementById('strandToggle');
  if(strandWrap && strandToggle){
    strandToggle.addEventListener('click', function(){
      var opened = strandWrap.classList.toggle('open');
      strandToggle.setAttribute('aria-expanded', opened ? 'true' : 'false');
    });
  }
})();
</script>
