@model TeacherPortalViewModel
@{
    Layout = "~/Views/Shared/_TeacherLayout.cshtml";
    ViewData["Title"] = "Strand Management";
}
<link rel="stylesheet" href="https://cdn.datatables.net/v/bs5/dt-2.0.0/datatables.min.css" />
<div class="mt-3">
    <div class="card shadow-sm">
        <div class="card-header bg-white d-flex align-items-center gap-2">
            <h5 class="mb-0">Strands</h5>
            <div class="ms-auto d-flex align-items-center gap-2">
                <button id="btnToggleFilters" class="btn btn-outline-secondary btn-sm" type="button" aria-pressed="false"><i class="bi bi-funnel me-1"></i>Filters</button>
                @* <button id="btnBulkDelete" class="btn btn-danger btn-sm"><i class="bi bi-trash me-1"></i>Bulk Delete</button>
                <button id="btnAdd" class="btn btn-primary btn-sm"><i class="bi bi-plus-circle me-1"></i>Add Strand</button> *@
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="strandsTable" class="table table-striped table-hover align-middle" width="100%">
                    <thead class="table-light">
                        <tr>
                           @*  <th style="width:26px;"><input type="checkbox" id="selectAllRows"></th> *@
                            <th style="width:40px;"></th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Color</th>
                            <th>Status</th>
                        </tr>
                        <tr class="filters-row d-none">
                            @* <th></th> *@
                            <th></th>
                            <th><input id="filterName" class="form-control form-control-sm" placeholder="Search name" /></th>
                            <th><input id="filterDesc" class="form-control form-control-sm" placeholder="Search desc" /></th>
                            <th><input id="filterColor" class="form-control form-control-sm" placeholder="#" /></th>
                            <th>
                                <select id="filterStatus" class="form-select form-select-sm">
                                    <option value="">All</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Modal -->
<div class="modal fade" id="modalAdd" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Strand</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="formAdd">
          <div class="mb-3">
            <label class="form-label">Name</label>
            <input type="text" id="addName" class="form-control" maxlength="50" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea id="addDescription" class="form-control" maxlength="200"></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Color</label>
            <input type="color" id="addColor" class="form-control form-control-color" value="#000000" required />
          </div>
          <div class="form-check mb-0">
            <input class="form-check-input" type="checkbox" id="addIsActive" checked />
            <label class="form-check-label" for="addIsActive">Active</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button id="btnSaveAdd" class="btn btn-primary">Save</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="modalEdit" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Strand</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="formEdit">
          <input type="hidden" id="editId" />
          <div class="mb-3">
            <label class="form-label">Name</label>
            <input type="text" id="editName" class="form-control" readonly maxlength="50" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea id="editDescription" class="form-control" readonly maxlength="200"></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Color</label>
            <input type="color" id="editColor" class="form-control form-control-color" required />
          </div>
          <div class="form-check mb-0">
            <input class="form-check-input" type="checkbox" id="editIsActive" />
            <label class="form-check-label" for="editIsActive">Active</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button id="btnSaveEdit" class="btn btn-primary">Save Changes</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script src="https://cdn.datatables.net/v/bs5/dt-2.0.0/datatables.min.js"></script>
<script>
(function(){
  window.applyDataTablesDefaults && window.applyDataTablesDefaults();
  const table = new DataTable('#strandsTable', {
    ajax: { url: '@Url.Action("List","StrandManagement")', dataSrc: 'data' },
    pageLength: 10,
    columns: [
      // { data: null, orderable:false, className:'text-center', render: (_, __, row)=>`<input type="checkbox" class="row-select" data-id="${row.id}">` },
      { data: null, orderable:false, className:'text-start', render: renderActions },
      { data: 'name' },
      { data: 'description', render: v => v || '' },
      { data: 'color', render: v => `<span class='badge' style='background:${v};'>${v}</span>` },
      { data: 'isActive', render: v => v ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-secondary">Inactive</span>' }
    ]
  });

  function renderActions(_, __, row){
    return `<div class="dropdown">
  <button class="btn btn-light btn-sm dropdown-toggle" data-bs-toggle="dropdown">Actions</button>
  <ul class="dropdown-menu">
    <li><a class="dropdown-item" href="#" data-action="edit" data-id="${row.id}"><i class="bi bi-pencil-square me-1"></i>Edit</a></li>
    <li><a class="dropdown-item" href="${'@Url.Action("Index", "StrandQuizManagement")'}?strandId=${row.id}"><i class="bi bi-ui-checks-grid me-1"></i>Quizzes</a></li>
    <li><a class="dropdown-item text-danger" href="#" data-action="delete" data-id="${row.id}"><i class="bi bi-trash me-1"></i>Delete</a></li>
  </ul>
</div>`;
  }

  // Inline filters
  const filterName = document.getElementById('filterName');
  const filterDesc = document.getElementById('filterDesc');
  const filterColor = document.getElementById('filterColor');
  const filterStatus = document.getElementById('filterStatus');
  const filtersRow = document.querySelector('#strandsTable thead tr.filters-row');
  const toggleBtn = document.getElementById('btnToggleFilters');

  function norm(v){return (v||'').toString().toLowerCase();}
  DataTable.ext.search.push(function(settings, data, dataIndex){
    if(settings.nTable !== document.getElementById('strandsTable')) return true;
    const row = table.row(dataIndex).data()||{};
    if(filterName.value && !norm(row.name).includes(norm(filterName.value))) return false;
    if(filterDesc.value && !norm(row.description).includes(norm(filterDesc.value))) return false;
    if(filterColor.value && !norm(row.color).includes(norm(filterColor.value))) return false;
    if(filterStatus.value){
      const st = row.isActive? 'active':'inactive';
      if(st !== filterStatus.value) return false;
    }
    return true;
  });

  ['input','change'].forEach(evt=>{
    [filterName, filterDesc, filterColor, filterStatus].forEach(el=> el.addEventListener(evt, ()=> table.draw()));
  });

  function setFiltersVisible(show){
    if(show){ filtersRow.classList.remove('d-none'); toggleBtn.classList.add('active'); toggleBtn.setAttribute('aria-pressed','true'); }
    else { filtersRow.classList.add('d-none'); toggleBtn.classList.remove('active'); toggleBtn.setAttribute('aria-pressed','false'); }
    try{ localStorage.setItem('strands_filters_visible', show? '1':'0'); }catch{}
  }
  toggleBtn.addEventListener('click', ()=> setFiltersVisible(filtersRow.classList.contains('d-none')) );
  const saved = (typeof localStorage !== 'undefined')? localStorage.getItem('strands_filters_visible'):null;
  setFiltersVisible(saved==='1');

  // // Selection helpers
  // const selectAll = document.getElementById('selectAllRows');
  // selectAll.addEventListener('change', ()=>{
  //   document.querySelectorAll('#strandsTable tbody input.row-select').forEach(cb=>{ cb.checked = selectAll.checked; });
  // });
  // function getSelectedIds(){
  //   return Array.from(document.querySelectorAll('#strandsTable tbody input.row-select:checked')).map(x=>x.getAttribute('data-id'));
  // }

  // Row actions with precheck
  document.getElementById('strandsTable').addEventListener('click', async e => {
    const a = e.target.closest('a[data-action]');
    if(!a) return; e.preventDefault();
    const action = a.getAttribute('data-action');
    const row = table.row(a.closest('tr')).data();
    if(!row) return;
    if(action==='edit') openEdit(row);
    if(action==='delete') {
      // Pre-check dependencies for a single id
      const check = await fetch('@Url.Action("CanDelete","StrandManagement")', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ ids: [row.id] }) });
      const cj = await check.json().catch(()=>({}));
      if(!check.ok){ alert(cj.message || 'Unable to check dependencies.'); return; }
      if((cj.inUse||[]).length){
        const reason = cj.inUse[0]?.reason || 'Record is in use by related data.';
        alert(reason);
        return;
      }
      const res = await fetch('@Url.Action("Delete","StrandManagement")?id='+row.id,{method:'DELETE'});
      if(res.ok) table.ajax.reload(null,false); else { const err = await res.json().catch(()=>({})); alert(err.message||'Delete failed'); }
    }
  });

  // Bulk delete with pre-check
  @*
  document.getElementById('btnBulkDelete').addEventListener('click', async ()=>{
    const ids = getSelectedIds();
    if(ids.length===0){ alert('Select at least one strand.'); return; }
    // Pre-check dependencies
    try{
      const check = await fetch('@Url.Action("CanDelete","StrandManagement")', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ ids }) });
      const cj = await check.json().catch(()=>({}));
      if(!check.ok){ alert(cj.message || 'Unable to check dependencies.'); return; }
      const blocked = (cj.inUse||[]);
      const allowed = (cj.ok||[]);
      if(allowed.length===0){
        const reasons = blocked.map(b=>`- ${b.id}: ${b.reason||'in use'}`).join('\n');
        alert('No deletions performed. Some items are in use:\n'+reasons);
        return;
      }
      const res = await fetch('@Url.Action("BulkDelete","StrandManagement")',{
        method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ ids: allowed })
      });
      const j = await res.json().catch(()=>({}));
      if(!res.ok){ alert(j.message || 'Bulk delete failed.'); return; }
      let msg = `Deleted: ${j.deleted}`;
      if(blocked.length){ msg += `\nBlocked: ${blocked.length}`; }
      if(j.errors && j.errors.length){ msg += `\nErrors: ${j.errors.join(', ')}`; }
      alert(msg);
      selectAll.checked = false;
      table.ajax.reload(null,false);
    }catch{ alert('Bulk delete failed.'); }
  });
  *@

  @*
  document.getElementById('btnAdd').addEventListener('click',()=>{ document.getElementById('formAdd').reset(); document.getElementById('addColor').value='#000000'; new bootstrap.Modal('#modalAdd').show();});
  *@
  document.getElementById('btnSaveAdd').addEventListener('click', async ()=>{
    const payload={ name: addName.value.trim(), description: addDescription.value.trim(), color: addColor.value.trim(), isActive: addIsActive.checked };
    if(!payload.name || !payload.color) return alert('Name and Color required');
    const res = await fetch('@Url.Action("Create","StrandManagement")',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
    if(res.ok){ bootstrap.Modal.getInstance(document.getElementById('modalAdd')).hide(); table.ajax.reload(null,false);} else { const err= await res.json().catch(()=>({})); alert(err.message||'Create failed'); }
  });

  function openEdit(row){
    editId.value=row.id; editName.value=row.name; editDescription.value=row.description||''; editColor.value=row.color; editIsActive.checked=!!row.isActive; new bootstrap.Modal('#modalEdit').show();
  }

  document.getElementById('btnSaveEdit').addEventListener('click', async ()=>{
    const payload={ id: editId.value, name: editName.value.trim(), description: editDescription.value.trim(), color: editColor.value.trim(), isActive: editIsActive.checked };
    if(!payload.id || !payload.name || !payload.color) return alert('Missing fields');
    const res = await fetch('@Url.Action("Update","StrandManagement")',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
    if(res.ok){ bootstrap.Modal.getInstance(document.getElementById('modalEdit')).hide(); table.ajax.reload(null,false);} else { const err= await res.json().catch(()=>({})); alert(err.message||'Update failed'); }
  });
})();
</script>
}
