@model StudentStrandQuizPlayViewModel
@{
    ViewData["Title"] = Model.QuizTitle + " - Question " + Model.CurrentIndex;
    var shieldMsg = TempData["ShieldMessage"] as string;
    bool correctPrev = ViewBag.CorrectPrev == true; // set by controller only after an answer submission
    bool incorrectPrev = ViewBag.IncorrectPrev == true; // newly added flag
    bool gained = Model.GainedShieldThisQuestion; // server flag indicating shield awarded this question
    bool used = Model.UsedShieldThisQuestion; // shield used (retry same question)
    int streak = Model.CurrentStreak;
    // User has actually answered at least one question already (prevents toasts on first render)
    bool hasProgress = Model.AnsweredCount > 0 && Model.CurrentIndex > 1;
    // Only consider milestone when it is an exact multiple of 5 (>=5)
    bool milestoneHit = streak >= 5 && streak % 5 == 0;
    bool earnedThisMilestone = gained && milestoneHit; 
    // Show correct toast only if we have progress AND previous answer was correct and not overridden by milestone toast
    bool showCorrect = hasProgress && correctPrev && !earnedThisMilestone; 
    bool showIncorrect = hasProgress && incorrectPrev && !used; // only after moving on (no shield retry)
}
@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="~/css/quiz-play.css" />
    <style>
        /* Incorrect feedback animations (inline overrides for legacy) */
        .incorrect-flash { animation: incorrectFlash .9s ease; }
        @@keyframes incorrectFlash {0%{background:#5b1118; color:#fff;}40%{background:#dc2626;}100%{background:transparent;} }
    </style>
}
<div class="quiz-hero play-hero mb-3" style="background:radial-gradient(circle at 30% 30%, #12395f, #071726 70%); border-radius:22px; box-shadow:0 10px 28px -10px #000d;">
  <h2 class="mb-2 fw-bold" style="letter-spacing:.5px;">@Model.QuizTitle</h2>
  <p class="text-muted small mb-2" style="color:#b4cad8 !important;">Strand: <strong style="color:#ffffff;">@Model.StrandName</strong> | Question @Model.CurrentIndex of @Model.TotalQuestions | Answered: @Model.AnsweredCount</p>
  <div class="hud mb-0">
      <div id="shieldStat" class="hud-block small"><i class="fa-solid fa-shield-halved me-1 shield-icon"></i> <span class="text-uppercase" style="font-size:.6rem; opacity:.8;">Shields</span>: <strong id="shieldCount">@Model.ShieldsRemaining</strong></div>
      <div class="hud-block small @(streak >= 3 ? "streak-glow" : "")"><i class="fa-solid fa-fire me-1 text-warning"></i> <span class="text-uppercase" style="font-size:.6rem; opacity:.8;">Streak</span>: <strong id="streakCount">@streak</strong></div>
      <div class="hud-block flex-grow-1" style="min-width:200px;">
          <div class="d-flex justify-content-between" style="font-size:.55rem; margin-bottom:2px; color:#6abed4; font-weight:600; text-transform:uppercase; letter-spacing:1px;">
              <span>Progress</span>
              <span>@(((int)Math.Round((double)Model.CurrentIndex/Model.TotalQuestions*100)))%</span>
          </div>
          <div class="progress-shell" style="--w:@(((double)Model.CurrentIndex/Model.TotalQuestions*100).ToString("0.##"))%"><span style="width:@(((double)Model.CurrentIndex/Model.TotalQuestions*100).ToString("0.##"))%"></span></div>
      </div>
  </div>
</div>
@if(!string.IsNullOrWhiteSpace(shieldMsg)){
    <div class="alert alert-warning py-2 small mb-3 shield-pulse" style="background:#173042; border:1px solid #265169; color:#c3e4f7;">@shieldMsg</div>
}
@if(earnedThisMilestone){
    <div class="anim-toast shield-earned" data-streak="@streak" role="alert"><span class="toast-icon text-info"><i class="fa-solid fa-shield"></i></span><strong>Shield Earned!</strong> 5-correct streak bonus.</div>
}
@if(showCorrect){
    <div class="anim-toast" role="alert"><span class="toast-icon text-success"><i class="fa-solid fa-circle-check"></i></span> Correct! Keep the streak going...</div>
}
@if(showIncorrect){
    <div class="anim-toast" role="alert" style="background:#3b1014; border:1px solid #5d1a21;"><span class="toast-icon text-danger"><i class="fa-solid fa-xmark"></i></span> Incorrect answer recorded.</div>
}
<div class="card mb-4 game-card @(showIncorrect ? "incorrect-flash" : (showCorrect ? "correct-flash" : ""))">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <span class="question-index">QUESTION @Model.CurrentIndex</span>
            <span class="small" style="color:#6abed4;">Remaining: @(Model.TotalQuestions-Model.CurrentIndex)</span>
        </div>
        <h5 class="mb-3" style="line-height:1.3;">@Model.QuestionText</h5>
        <div id="answerGrid" class="answer-grid @(showIncorrect ? "incorrect-state" : (showCorrect ? "correct-state" : ""))">
            @foreach(var opt in Model.Options.Select((o,i)=> new { o, i })){
                <form asp-action="Submit" asp-route-quizId="@Model.QuizId" asp-route-questionId="@Model.QuestionId" asp-route-optionId="@opt.o.OptionId" method="post" class="quiz-answer-form">
                    @Html.AntiForgeryToken()
                    <button type="submit" data-answer-index="@opt.i" class="@(used ? "retry-shield" : "")">
                        <span>@opt.o.Text</span>
                        <span class="kbd">ALT+@((opt.i+1))</span>
                    </button>
                </form>
            }
        </div>
    </div>
</div>
<a asp-action="Results" asp-route-quizId="@Model.QuizId" asp-route-force="true" class="btn btn-sm finish-btn"><i class="fa-solid fa-flag-checkered me-1"></i>Finish Now</a>
<audio id="bgMusic" loop preload="auto" style="display:none;">
    <source src="/media/quiz-bgm.mp3" type="audio/mpeg" />
</audio>
<div id="burstLayer" class="shield-gain-burst"></div>
<div class="bgm-control" id="bgmCtl" aria-label="Background music controls">
  <span class="label">BGM</span>
  <button type="button" id="bgmPlayPause" aria-label="Pause background music"><i class="fa-solid fa-pause"></i></button>
  <input type="range" id="bgmVolume" min="0" max="1" step="0.01" aria-label="Background music volume" />
</div>
<script>
(function(){
  // Debug flags
  console.debug('Quiz Play init: correctPrev=%s incorrectPrev=%s', '@correctPrev', '@incorrectPrev');
  // -------- Music Persistence & Controls --------
  const music = document.getElementById('bgMusic');
  const volSlider = document.getElementById('bgmVolume');
  const playPauseBtn = document.getElementById('bgmPlayPause');
  const STORE_KEY = 'quiz_bgm_state_v1'; // {t,vol,playing}
  const DEFAULT_VOL = 0.25;
  function loadState(){
     try { return JSON.parse(localStorage.getItem(STORE_KEY)||'{}'); } catch { return {}; }
  }
  function saveState(st){ localStorage.setItem(STORE_KEY, JSON.stringify(st)); }
  const state = loadState();
  const startTime = typeof state.t === 'number' ? state.t : 0;
  const startVol = typeof state.vol === 'number' ? state.vol : DEFAULT_VOL;
  const startPlaying = state.playing !== false; // default true
  if(music){
     music.volume = Math.min(1, Math.max(0, startVol));
     volSlider.value = music.volume;
     const tryStart = ()=>{
        if(startTime > 0 && !isNaN(startTime)){
           const applyTime = ()=>{ if(music.duration && startTime < music.duration) music.currentTime = startTime % music.duration; };
           if(isFinite(music.duration)) applyTime(); else music.addEventListener('loadedmetadata', applyTime, { once:true });
        }
        if(startPlaying){ music.play().catch(()=>{}); }
        updateButton();
     };
     const gestureStart = ()=>{ tryStart(); document.removeEventListener('click', gestureStart); };
     document.addEventListener('click', gestureStart);
     tryStart();
     setInterval(()=>{ if(!music.paused){ saveState({ t: music.currentTime, vol: music.volume, playing: !music.paused }); } }, 1500);
     const persist = ()=> saveState({ t: music.currentTime, vol: music.volume, playing: !music.paused });
     document.addEventListener('visibilitychange', persist);
     window.addEventListener('beforeunload', persist);
     volSlider.addEventListener('input', ()=>{ music.volume = parseFloat(volSlider.value); persist(); });
     function updateButton(){
        if(music.paused){ playPauseBtn.innerHTML = '<i class="fa-solid fa-play"></i>'; playPauseBtn.setAttribute('aria-label','Play background music'); }
        else { playPauseBtn.innerHTML = '<i class="fa-solid fa-pause"></i>'; playPauseBtn.setAttribute('aria-label','Pause background music'); }
     }
     playPauseBtn.addEventListener('click', ()=>{ if(music.paused){ music.play().catch(()=>{}); } else { music.pause(); } persist(); updateButton(); });
  }
  // -------- Shield & Toast Logic --------
  const quizId = '@Model.QuizId';
  const KEY_LAST_MILESTONE = 'shield_last_milestone_v1_'+quizId;
  const KEY_PREV_STREAK = 'shield_prev_streak_v1_'+quizId;
  const currentStreak = @streak;
  const earned = @earnedThisMilestone.ToString().ToLower();
  let lastMilestone = parseInt(localStorage.getItem(KEY_LAST_MILESTONE) || '0');
  let prevStreak = parseInt(localStorage.getItem(KEY_PREV_STREAK) || '0');
  if(currentStreak < lastMilestone) { lastMilestone = 0; localStorage.setItem(KEY_LAST_MILESTONE,'0'); }
  if(earned){
     if(currentStreak === lastMilestone){ document.querySelectorAll('.anim-toast.shield-earned').forEach(t=> t.remove()); }
     else if(currentStreak % 5 === 0 && currentStreak >=5){ lastMilestone = currentStreak; localStorage.setItem(KEY_LAST_MILESTONE, String(lastMilestone)); }
  }
  if(earned && document.querySelector('.anim-toast.shield-earned')){
     const layer = document.getElementById('burstLayer');
     for(let i=0;i<14;i++){
       const s=document.createElement('span');
       s.innerHTML='<i class="fa-solid fa-shield-halved"></i>';
       s.style.color=['#1e88e5','#19c1b6','#7b1fa2','#0d5f82','#16a34a'][Math.floor(Math.random()*5)];
       const x=Math.random()*window.innerWidth; const y=(window.innerHeight/2)+(Math.random()*80-40);
       s.style.position='absolute'; s.style.left=x+'px'; s.style.top=y+'px'; s.style.animationDelay=(Math.random()*0.4)+'s';
       layer.appendChild(s); setTimeout(()=>{s.remove();},1600);
     }
     const stat=document.getElementById('shieldStat'); if(stat) stat.classList.add('shield-pulse');
  }
  const toasts = document.querySelectorAll('.anim-toast');
  if(toasts.length){ setTimeout(()=>{ toasts.forEach(t=>{ t.classList.add('toast-hide'); setTimeout(()=> t.remove(), 400); }); }, 5000); }
  localStorage.setItem(KEY_PREV_STREAK, String(currentStreak));
  // Keyboard shortcuts
  window.addEventListener('keydown', e=>{ if(e.altKey){ const num = parseInt(e.key,10); if(!isNaN(num) && num>0){ const btn = document.querySelector('[data-answer-index="'+(num-1)+'"]'); if(btn){ e.preventDefault(); btn.closest('form').submit(); } } } });
  // Ripple effect
  document.querySelectorAll('.quiz-answer-form button').forEach(btn=>{
     btn.addEventListener('click', function(e){
        const rect = this.getBoundingClientRect();
        const span = document.createElement('span');
        const x = (e.clientX - rect.left)+'px';
        const y = (e.clientY - rect.top)+'px';
        span.className='ripple'; span.style.setProperty('--x', x); span.style.setProperty('--y', y);
        this.appendChild(span); setTimeout(()=> span.remove(), 700);
     });
  });
  // State fade logic
  const ag = document.getElementById('answerGrid');
  if(ag){
     console.debug('answerGrid initial classes:', ag.className);
     if(ag.classList.contains('correct-state')){
        setTimeout(()=>{ ag.classList.add('correct-fading'); ag.classList.remove('correct-state'); console.debug('correct-state -> correct-fading'); setTimeout(()=> ag.classList.remove('correct-fading'), 650); }, 1000);
     } else if(ag.classList.contains('incorrect-state')){
        setTimeout(()=>{ ag.classList.add('incorrect-fading'); ag.classList.remove('incorrect-state'); console.debug('incorrect-state -> incorrect-fading'); setTimeout(()=> ag.classList.remove('incorrect-fading'), 650); }, 1000);
     }
  }
})();
</script>
