// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STRANDVENTURE.Data;

#nullable disable

namespace STRANDVENTURE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901161546_UpdateEmployeeSeed")]
    partial class UpdateEmployeeSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("STRANDVENTURE.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1f6a527-8aac-4f51-aa59-0c3d8b451e18"),
                            CreatedAt = new DateTime(2025, 9, 2, 0, 15, 46, 62, DateTimeKind.Local).AddTicks(8479),
                            Email = "superadmin@gmail.com",
                            IsActive = true,
                            Name = "Super",
                            PasswordHash = "PBKDF2-HMACSHA256.210000.cN1lErw/DSXXiC2Ia6s/2g==.vDtDftrm0nDgAhNkYVBSJs4kuClVvV0kJxnPZob/01k=",
                            Role = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("a26b9b24-c1ac-47de-9555-9c41571a7bff"),
                            CreatedAt = new DateTime(2025, 9, 2, 0, 15, 46, 88, DateTimeKind.Local).AddTicks(2194),
                            Email = "teacher1@gmail.com",
                            IsActive = true,
                            Name = "Teacher 1",
                            PasswordHash = "PBKDF2-HMACSHA256.210000.PNXSS6xiYYFJYlbhN49ozw==.V8AzyE5+esNy5BWxuBuih8Zyql0g5x5pDhhsGRjcSqM=",
                            Role = "Teacher"
                        });
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionOrder")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("OptionLetter")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId", "OptionLetter")
                        .IsUnique();

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOptionStrandWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("QuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.HasIndex("StrandId");

                    b.HasIndex("QuestionOptionId", "StrandId")
                        .IsUnique();

                    b.ToTable("QuestionOptionStrandWeights");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.SectionStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrolledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SectionId", "StudentId")
                        .IsUnique();

                    b.ToTable("SectionStudents");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Strand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Strands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0afc1ab3-4cea-42d6-b759-bf44b829fad4"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Science, Technology, Engineering, Mathematics",
                            IsActive = true,
                            Name = "STEM"
                        },
                        new
                        {
                            Id = new Guid("51a0f2ea-61d9-4e8f-b852-884dac783063"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Humanities and Social Sciences",
                            IsActive = true,
                            Name = "HUMSS"
                        },
                        new
                        {
                            Id = new Guid("c5dd0fa9-ea6b-4adf-9820-0349244c7f6d"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Accountancy, Business and Management",
                            IsActive = true,
                            Name = "ABM"
                        },
                        new
                        {
                            Id = new Guid("1fb5c2a0-650f-443c-bd45-6e7adbaee4c7"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "General Academic Strand",
                            IsActive = true,
                            Name = "GAS"
                        },
                        new
                        {
                            Id = new Guid("2e39c993-3ebf-4e46-843f-41c80065f894"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sports Track",
                            IsActive = true,
                            Name = "SPORTS"
                        },
                        new
                        {
                            Id = new Guid("26756dc7-ba72-49a3-bc14-a7d7053031a9"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Arts and Design Track",
                            IsActive = true,
                            Name = "ARTS & DESIGN"
                        });
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LRN")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LRN")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Question", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Employee", "CreatedByEmployee")
                        .WithMany("CreatedQuestions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOption", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOptionStrandWeight", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.QuestionOption", "QuestionOption")
                        .WithMany("QuestionOptionStrandWeights")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Strand", "Strand")
                        .WithMany("QuestionOptionStrandWeights")
                        .HasForeignKey("StrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOption");

                    b.Navigation("Strand");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Section", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Employee", "Teacher")
                        .WithMany("Sections")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.SectionStudent", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Section", "Section")
                        .WithMany("SectionStudents")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Student", "Student")
                        .WithMany("SectionStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Employee", b =>
                {
                    b.Navigation("CreatedQuestions");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Question", b =>
                {
                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOption", b =>
                {
                    b.Navigation("QuestionOptionStrandWeights");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Section", b =>
                {
                    b.Navigation("SectionStudents");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Strand", b =>
                {
                    b.Navigation("QuestionOptionStrandWeights");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Student", b =>
                {
                    b.Navigation("SectionStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
