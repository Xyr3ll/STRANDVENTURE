// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STRANDVENTURE.Data;

#nullable disable

namespace STRANDVENTURE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251002180152_RemoveSeedQuestions")]
    partial class RemoveSeedQuestions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("STRANDVENTURE.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Icon")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Rarity")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Category = "Progress",
                            Code = "HALFWAY_HERO",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Answered half of the questions in an assessment.",
                            Icon = "🛤️",
                            IsActive = true,
                            Name = "Halfway Hero",
                            Rarity = "Common"
                        });
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1f6a527-8aac-4f51-aa59-0c3d8b451e18"),
                            CreatedAt = new DateTime(2025, 10, 2, 18, 1, 51, 466, DateTimeKind.Utc).AddTicks(3933),
                            Email = "superadmin@gmail.com",
                            IsActive = true,
                            Name = "Super",
                            PasswordHash = "PBKDF2-HMACSHA256.210000.OhNwdlakMX53EUbBXt2I1A==.MQczwXer+YMKEyk+l7+M/khM70lN2I3YDktvuly/UV0=",
                            Role = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("a26b9b24-c1ac-47de-9555-9c41571a7bff"),
                            CreatedAt = new DateTime(2025, 10, 2, 18, 1, 51, 491, DateTimeKind.Utc).AddTicks(7377),
                            Email = "teacher1@gmail.com",
                            IsActive = true,
                            Name = "Teacher 1",
                            PasswordHash = "PBKDF2-HMACSHA256.210000.fHAl8oVpRApYGBq3nU06tA==.G7y9YigYKp9RSdiuwDXcKgmW9vuFYrYoOv/jyl9WyI8=",
                            Role = "Teacher"
                        });
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionOrder")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionLetter")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId", "IsCorrect")
                        .IsUnique()
                        .HasFilter("[IsCorrect] = 1");

                    b.HasIndex("QuestionId", "OptionLetter")
                        .IsUnique();

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOptionStrandWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("QuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.HasIndex("StrandId");

                    b.HasIndex("QuestionOptionId", "StrandId")
                        .IsUnique();

                    b.ToTable("QuestionOptionStrandWeights");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("StrandQuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StrandQuizId", "DisplayOrder")
                        .IsUnique()
                        .HasFilter("[DisplayOrder] IS NOT NULL");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuizQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId", "IsCorrect")
                        .IsUnique()
                        .HasFilter("[IsCorrect] = 1");

                    b.HasIndex("QuizQuestionId", "Letter")
                        .IsUnique();

                    b.ToTable("QuizQuestionOptions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("GradeLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.SectionStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrolledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SectionId", "StudentId")
                        .IsUnique();

                    b.ToTable("SectionStudents");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Strand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("#000000");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Strands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f5b7c7c-6d5e-4a4e-9b7a-0b7e4d6a9c11"),
                            Color = "#ff9800",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Focuses on travel, hospitality operations, destination management, customer service and sustainable tourism basics.",
                            IsActive = true,
                            Name = "Tourism"
                        },
                        new
                        {
                            Id = new Guid("cab2e5d5-53e8-4f5e-bc1d-6d4a9f8b7e33"),
                            Color = "#3f51b5",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Accountancy, Business & Management: accounting fundamentals, entrepreneurship, finance, marketing and business planning.",
                            IsActive = true,
                            Name = "ABM"
                        },
                        new
                        {
                            Id = new Guid("5c3f9e2d-2c4d-4e6c-9d3a-2b4e7f8a6c55"),
                            Color = "#9c27b0",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Visual communication: layout, branding, digital illustration, imaging basics and introductory UI/UX concepts.",
                            IsActive = true,
                            Name = "Graphics"
                        },
                        new
                        {
                            Id = new Guid("2d4f6b7c-8e5a-4c3d-9f2e-7a6b5c4d3e77"),
                            Color = "#009688",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Humanities & Social Sciences track variant highlighting communication, culture, social inquiry and community engagement.",
                            IsActive = true,
                            Name = "HUMSS–VG"
                        },
                        new
                        {
                            Id = new Guid("9e8d7c6b-5a4f-4d3c-8b2a-1f6e5d4c3b99"),
                            Color = "#795548",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Food preparation, kitchen operations, baking, nutrition, sanitation, menu planning and basic culinary entrepreneurship.",
                            IsActive = true,
                            Name = "Culinary"
                        },
                        new
                        {
                            Id = new Guid("4a3b2c1d-5e6f-4789-8a9b-bc1d2e3f4a11"),
                            Color = "#e91e63",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "STEM pathway emphasizing biology, chemistry, health sciences, research skills and preparation for medical fields.",
                            IsActive = true,
                            Name = "STEM–Med"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-4789-9a8b-cd1e2f3a4b22"),
                            Color = "#2196f3",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "STEM pathway focusing on physics, advanced math, design thinking, prototyping and applied engineering concepts.",
                            IsActive = true,
                            Name = "STEM–Eng"
                        },
                        new
                        {
                            Id = new Guid("7b8c9d1e-2f3a-4b5c-8d9e-a1b2c3d4e5f6"),
                            Color = "#607d8b",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Programming fundamentals, algorithms, databases, version control and application development lifecycle projects.",
                            IsActive = true,
                            Name = "Software Dev"
                        });
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StrandQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<bool>("RandomizeOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("RandomizeQuestions")
                        .HasColumnType("bit");

                    b.Property<Guid>("StrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TimeLimitSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StrandId", "IsLive")
                        .IsUnique()
                        .HasFilter("[IsLive] = 1");

                    b.HasIndex("StrandId", "Title")
                        .IsUnique();

                    b.ToTable("StrandQuizzes");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LRN")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LRN")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContextInfo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UnlockedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("StudentId");

                    b.HasIndex("AttemptId", "AchievementId")
                        .IsUnique();

                    b.ToTable("StudentAssessmentAchievements");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SelectedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionOptionId");

                    b.HasIndex("AttemptId", "QuestionId")
                        .IsUnique();

                    b.ToTable("StudentAssessmentAnswers");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalScorePercent")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId", "AttemptNumber")
                        .IsUnique();

                    b.ToTable("StudentAssessmentAttempts");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinalizedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("RecommendedStrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId")
                        .IsUnique();

                    b.HasIndex("RecommendedStrandId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentAssessmentResults");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentStrandScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("ScorePercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("StrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StrandId");

                    b.HasIndex("AttemptId", "StrandId")
                        .IsUnique();

                    b.ToTable("StudentAssessmentStrandScores");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentNotifyAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentNotifyAssessments");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Question", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Employee", "CreatedByEmployee")
                        .WithMany("CreatedQuestions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOption", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOptionStrandWeight", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.QuestionOption", "QuestionOption")
                        .WithMany("QuestionOptionStrandWeights")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Strand", "Strand")
                        .WithMany("QuestionOptionStrandWeights")
                        .HasForeignKey("StrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOption");

                    b.Navigation("Strand");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuizQuestion", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.StrandQuiz", "StrandQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("StrandQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("StrandQuiz");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuizQuestionOption", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.QuizQuestion", "QuizQuestion")
                        .WithMany("Options")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Section", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Employee", "Teacher")
                        .WithMany("Sections")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.SectionStudent", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Section", "Section")
                        .WithMany("SectionStudents")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Student", "Student")
                        .WithMany("SectionStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StrandQuiz", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Strand", "Strand")
                        .WithMany()
                        .HasForeignKey("StrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("Strand");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentAchievement", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Achievement", "Achievement")
                        .WithMany("StudentAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.StudentAssessmentAttempt", "Attempt")
                        .WithMany("EarnedAchievements")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Attempt");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentAnswer", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.StudentAssessmentAttempt", "Attempt")
                        .WithMany("Answers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.QuestionOption", "QuestionOption")
                        .WithMany()
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Question");

                    b.Navigation("QuestionOption");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentAttempt", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentResult", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.StudentAssessmentAttempt", "Attempt")
                        .WithOne("Result")
                        .HasForeignKey("STRANDVENTURE.Models.StudentAssessmentResult", "AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Strand", "RecommendedStrand")
                        .WithMany()
                        .HasForeignKey("RecommendedStrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STRANDVENTURE.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("RecommendedStrand");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentStrandScore", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.StudentAssessmentAttempt", "Attempt")
                        .WithMany("StrandScores")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRANDVENTURE.Models.Strand", "Strand")
                        .WithMany()
                        .HasForeignKey("StrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Strand");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentNotifyAssessment", b =>
                {
                    b.HasOne("STRANDVENTURE.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Achievement", b =>
                {
                    b.Navigation("StudentAchievements");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Employee", b =>
                {
                    b.Navigation("CreatedQuestions");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Question", b =>
                {
                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuestionOption", b =>
                {
                    b.Navigation("QuestionOptionStrandWeights");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.QuizQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Section", b =>
                {
                    b.Navigation("SectionStudents");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Strand", b =>
                {
                    b.Navigation("QuestionOptionStrandWeights");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StrandQuiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.Student", b =>
                {
                    b.Navigation("SectionStudents");
                });

            modelBuilder.Entity("STRANDVENTURE.Models.StudentAssessmentAttempt", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("EarnedAchievements");

                    b.Navigation("Result");

                    b.Navigation("StrandScores");
                });
#pragma warning restore 612, 618
        }
    }
}
